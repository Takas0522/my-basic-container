name: Build, Test and Push DevContainer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-devcontainer:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker Compose services
        run: |
          docker compose build

      - name: Start services for testing
        run: |
          docker compose up -d
          
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
      - name: Test DevContainer functionality
        run: |
          # Copy test script to running container and execute it
          docker compose exec -T app bash -c "
            # Make test script executable and run it
            chmod +x /workspace/.devcontainer/run-tests.sh
            /workspace/.devcontainer/run-tests.sh
          "

      - name: Stop services
        if: always()
        run: |
          docker compose down -v

  build-and-push:
    needs: test-devcontainer
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image name (lowercase)
        id: set-image-name
        run: |
          REPO_NAME=${GITHUB_REPOSITORY,,}
          echo "base_repo=ghcr.io/$REPO_NAME" >> $GITHUB_OUTPUT
          echo "app_image=ghcr.io/$REPO_NAME/app:latest" >> $GITHUB_OUTPUT

      - name: Build Docker Compose services
        run: |
          docker compose build

      - name: Tag and Push app service
        run: |
          docker tag my-basic-container-app:latest ${{ steps.set-image-name.outputs.app_image }}
          docker push ${{ steps.set-image-name.outputs.app_image }}
